#include "{{classname}}.h"

using namespace std;
using namespace Tiny;

{{#operations}}

    {{classname}}::{{classname}}()
    {

    }

    {{classname}}::~{{classname}}()
    {

    }
    {{! Method }}
    {{#operation}}

        Response<
        {{#returnType}}
            {{#returnContainer}}
                {{#isArray}}
                    {{returnType}}<{{returnBaseType}}>
                {{/isArray}}
            {{/returnContainer}}
            {{^returnContainer}}
                {{returnType}}
            {{/returnContainer}}
        {{/returnType}}
        {{^returnType}}
            String
        {{/returnType}}
        >
        {{classname}}::
        {{! Method name }}
        {{nickname}}(
        {{! Params }}
        {{#allParams}}
        {{! Arrays }}
            {{#isContainer}}{{{dataType}}}<{{baseType}}> {{paramName}}{{/isContainer}}
            {{! Normal types/objects }}
            {{^isContainer}}{{{dataType}}} {{paramName}}{{/isContainer}}
            {{^-last}}, {{/-last}}
        {{/allParams}}
        )
        {{! Method start}}
        {
            std::string url = basepath + "{{{path}}}"; //{{#pathParams}}{{{paramName}}} {{/pathParams}}
            // Query    | {{#queryParams}}{{paramName}} {{/queryParams}}
            // Headers  | {{#headerParams}}{{paramName}} {{/headerParams}}
            // Headers  | {{#formParams}}{{paramName}} {{/formParams}}
            // Body     | {{#bodyParam}}{{paramName}}{{/bodyParam}}

            {{#pathParams}}
                string s_{{paramName}}("{");
                s_{{paramName}}.append("{{{baseName}}}");
                s_{{paramName}}.append("}");

                int pos = url.find(s_{{paramName}});

                url.erase(pos, s_{{paramName}}.length());
                url.insert(pos, stringify({{paramName}})); //stringify(&{{paramName}}, "{{dataType}}"));
            {{/pathParams}}

            HTTPClient http;
            http.begin(String(url.c_str()), test_root_ca); //HTTPS example connection

            // Send Request
            // METHOD | {{httpMethod}}
            int httpCode = http.{{httpMethod}}();

            // Handle Request
            String payload = http.getString();
            std::string payload_std_string(payload.c_str());
            

            http.end();

        // --------------- MINE STARTS HERE ---------------

            {{#returnType}}

            {{#returnContainer}}
            {{#isArray}}

            std::list<{{returnBaseType}}> obj = new std::list<{{returnBaseType}}>();
            bourne::json jsonPayload(payload.c_str());

            {{#returnBaseType}}
            {{#isBool}}{{#isInteger}}{{#isLong}}{{#isString}}{{#isFloat}}
            
            for(auto& var : jsonPayload)
            {
                {{returnBaseType}} tmp = var;
                obj.push_back(tmp);
            }
            {{/isFloat}}{{/isString}}{{/isLong}}{{/isInteger}}{{/isBool}}

            {{^isBool}}{{^isInteger}}{{^isLong}}{{^isString}}{{^isFloat}}
            for(auto& var : jsonPayload)
            {
                {{returnBaseType}} tmp(var.dump());
                obj.push_back(tmp);
            }
            {{/isFloat}}{{/isString}}{{/isLong}}{{/isInteger}}{{/isBool}}

            {{/returnBaseType}}

            {{/isArray}}

            {{#isMap}}
            //TODO: Implement map logic here
            {{/isMap}}

            {{/returnContainer}}

            {{^returnContainer}}
            {{#returnTypeIsPrimitive}}
            bourne::json jsonPayload(payload.c_str());
            {{returnType}} obj;
            jsonToValue(&obj, jsonPayload, "{{returnType}}");
            {{/returnTypeIsPrimitive}}

            {{^returnTypeIsPrimitive}}
            {{returnType}} obj(payload.c_str());
            {{/returnTypeIsPrimitive}}
            {{/returnContainer}}

            {{/returnType}}

        // --------------- MINE ENDS HERE ---------------

            Response<
        {{#returnType}}
            {{#returnContainer}}
                {{#isArray}}
                    {{returnType}}<{{returnBaseType}}>
                {{/isArray}}
            {{/returnContainer}}
            {{^returnContainer}}
                {{returnType}}
            {{/returnContainer}}
        {{/returnType}}
        {{^returnType}}
            String
        {{/returnType}}
        > response(obj, httpCode);
            return response;
        }
    {{/operation}}



{{/operations}}
}