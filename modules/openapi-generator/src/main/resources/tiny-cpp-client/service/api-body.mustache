#include "{{classname}}.h"

using namespace std;
using namespace Tinyclient;

{{#operations}}

    {{classname}}::{{classname}}()
    {

    }

    {{classname}}::~{{classname}}()
    {

    }
    {{! Method }}
    {{#operation}}

        Response
        {{#allParams}}
            {{#returnType}}
                <
                {{!Arrays }}
                {{#returnContainer}}{{#isArray}}{{returnType}}<{{returnBaseType}}>{{/isArray}}{{/returnContainer}}
                {{! Normal types/objects }}
                {{^returnContainer}}{{returnType}}{{/returnContainer}}
                >
            {{/returnType}}
        {{/allParams}}
        {{! Method name }}
        {{nickname}}(
        {{! Params }}
        {{#allParams}}
        {{! Arrays }}
            {{#isContainer}}{{{dataType}}}<{{baseType}}> {{paramName}}{{/isContainer}}
            {{! Normal types/objects }}
            {{^isContainer}}{{{dataType}}} {{paramName}}{{/isContainer}}
            {{^-last}}, {{/-last}}
        {{/allParams}}
        )
        {{! Method start}}
        {
            String url = basepath + "{{{path}}}"; //{{#pathParams}}{{{paramName}}} {{/pathParams}}
            // Query    | {{#queryParams}}{{paramName}} {{/queryParams}}
            // Headers  | {{#headerParams}}{{paramName}} {{/headerParams}}
            // Headers  | {{#formParams}}{{paramName}} {{/formParams}}
            // Body     | {{#bodyParam}}{{paramName}}{{/bodyParam}}
            Serial.println("Connecting to website: " + url);
            HTTPClient http;
            http.begin(url, test_root_ca); //HTTPS example connection

            // Send Request
            // METHOD | {{httpMethod}}
            int httpCode = http.{{httpMethod}}();

            // Handle Request
            String payload = http.getString();
            http.end();

            Response<Pet> response(Pet(payload), httpCode);
            return response;
        }
    {{/operation}}

    private:



{{/operations}}
}